from typing import Union, Dict


# ref
def text_wrapper2(text: str, start: int, width: int):
    """Разделить текст на страницы."""
    symbols = (',.!?:;')
    res = max(text[start: width + start].rfind(i) for i in symbols)
    return res + 1, text[start: res + start + 1]


        while '[...]' in short_text:
            short_text: str = tw.shorten(text[cursor_start:], width=500)
            dict_of_text.setdefault(page, short_text)
            cursor_start += len(short_text) - 4  # 4 - с таким диапазоном не обрезается
            page += 1

        return dict_of_text
    return text


texts = """Из-за сложности изложения книга плохо подходит новичкам, но она должна быть в
библиотеке любого Python-разработчика, который хочет стать профессионалом.

В книге глубоко раскрывается большая часть возможностей Python и приводятся
реальные примеры применения языка. Однако оригинал был написан в 2013 году и
некоторые современные возможности Python не рассматриваются.

Во-первых, оригинальная книга, то есть пятое издание на английском языке, вышло
в 2013 году, и оно охватывает Python 3.3. К текущему моменту, то есть к 2020 году,
книга получила несколько апдейтов и должна затрагивать Python 3.7. Однако эти
апдейты условные. Основное же содержание книги не менялось уже 7 лет.

Так в предисловии автор много говорит, о том, что есть две ветки Python: вторая
и третья, и вторая доминирует. Но это уже не так, Python 3 прочно занял место в
продакшене, а Python 2 стремительно уходит в прошлое. Практически все ключевые
библиотеки и фреймворки поддерживают Python 3. Поэтому, конечно, неплохо знать об
отличиях второй и третьей ветки, но в обучении я бы делал упор именно на Python 3.

Во-вторых, Марк Лутц очень подробно описывает, что из себя представляет его книга
и как ей пользоваться. В частности — данная книга не является справочником, а это
скорее учебное пособие. А еще эта книга описывает возможности Python, и не затрагивает
какие-то сторонние библиотеки."""


if __name__ == '__main__':
    pprint(text_wrapper(texts))

